<!DOCTYPE html>
<html lang="my">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IELTS Day 1-100 Interactive Vocabulary</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Padauk:wght@400;700&display=swap" rel="stylesheet">
    <style>
        /* Theme variables (customizable at runtime) */
        :root{
            --bg: #FDF8F0;
            --text: #2D3748;
            --muted: #718096;
            --accent: #ED8936;
            --accent-strong: #DD6B20;
            --card-bg: #FFFFFF;
            --card-back: #60A5FA;
            --tab-active-bg: var(--accent-strong);
            --tab-active-color: #ffffff;
        }
        :root[data-theme="dark"]{
            --bg: #0F172A;
            --text: #E6EEF8;
            --muted: #9AA7BF;
            --accent: #60A5FA;
            --accent-strong: #2563EB;
            --card-bg: #0B1220;
            --card-back: #1E293B;
            --tab-active-bg: var(--accent-strong);
            --tab-active-color: #ffffff;
        }

        body{
            font-family: 'Padauk','Inter',sans-serif;
            background-color: var(--bg);
            color: var(--text);
        }
        .text-muted{ color: var(--muted); }

        .tab-active{
            background-color: var(--tab-active-bg);
            color: var(--tab-active-color);
            border-color: var(--tab-active-bg);
        }

        .flip-card{ background-color: transparent; perspective: 1000px; }
        .flip-card-inner{ position: relative; width:100%; height:100%; text-align:center; transition: transform 0.6s; transform-style:preserve-3d; }
        .flip-card.is-flipped .flip-card-inner{ transform: rotateY(180deg); }
        .flip-card-front, .flip-card-back{ position:absolute; width:100%; height:100%; backface-visibility: hidden; display:flex; justify-content:center; align-items:center; border-radius:0.75rem; padding:1rem; }
        .flip-card-front{ background-color: var(--card-bg); color: var(--text); border:1px solid rgba(0,0,0,0.06); }
        .flip-card-back{ background-color: var(--card-back); color: white; transform: rotateY(180deg); }

        .icon{ font-size:1.5rem; margin-right:8px; }

        /* Theme toggle & customizer */
        #theme-toggle{ background: linear-gradient(90deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02)); border:1px solid rgba(0,0,0,0.06); padding:0.5rem 0.75rem; border-radius:9999px; display:inline-flex; gap:0.5rem; align-items:center; cursor:pointer; }
        :root[data-theme="dark"] #theme-toggle{ border-color: rgba(255,255,255,0.06); background: linear-gradient(90deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); }

        #customize-panel{ min-width:220px; }
        #customize-panel input[type="color"]{ width:100%; height:36px; border:0; padding:0; }
    </style>
</head>
<body class="antialiased">
    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        <header class="flex items-center justify-between mb-8">
            <div class="text-left">
                <h1 class="text-3xl sm:text-4xl font-bold" id="app-title">IELTS Day 1 ဝေါဟာရ လေ့လာရန်</h1>
                <p class="text-muted mt-2">အပြန်အလှန်တုံ့ပြန်လေ့လာနိုင်သော Application</p>
            </div>

            <div class="flex items-center space-x-3">
                <label for="day-select" class="hidden sm:block font-semibold text-muted mr-2">လေ့လာမည့်နေ့ရက်ရွေးပါ:</label>

                <button id="theme-toggle" aria-pressed="false" title="Toggle theme">
                    <span id="theme-icon">🌤️</span>
                    <span id="theme-label" class="text-sm">Warm</span>
                </button>

                <!-- Color customizer -->
                <div id="color-customizer" class="ml-4 hidden sm:flex items-center">
                    <button id="customize-open" title="Customize colors" class="p-2 border rounded-md text-sm">🎨</button>
                    <div id="customize-panel" class="hidden bg-white p-3 rounded-md shadow-md ml-2">
                        <div class="text-sm font-semibold mb-2">Customize colors</div>
                        <div class="grid grid-cols-2 gap-2 mb-2">
                            <label class="text-xs">Background<input data-var="--bg" type="color"></label>
                            <label class="text-xs">Text<input data-var="--text" type="color"></label>
                            <label class="text-xs">Accent<input data-var="--accent" type="color"></label>
                            <label class="text-xs">Card front<input data-var="--card-bg" type="color"></label>
                            <label class="text-xs">Card back<input data-var="--card-back" type="color"></label>
                        </div>
                        <div class="flex justify-between">
                            <button id="customize-reset" class="text-xs px-2 py-1 border rounded">Reset</button>
                            <button id="customize-save" class="text-xs px-2 py-1 bg-blue-500 text-white rounded">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <main>
            <div class="w-full max-w-4xl mx-auto">
                <div class="mb-6 flex flex-col sm:flex-row items-center justify-between">
                    <div class="mb-4 sm:mb-0">
                        <label for="day-select" class="font-semibold text-gray-700 mr-2">လေ့လာမည့်နေ့ရက်ရွေးပါ:</label>
                        <select id="day-select" class="p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400">
                        </select>
                    </div>
                    <nav class="flex space-x-2 sm:space-x-4 border-b border-gray-200" id="tabs">
                        <button data-tab="vocabulary" class="tab-btn tab-active py-3 px-4 sm:px-6 font-semibold text-gray-600 rounded-t-lg border-b-2 border-transparent hover:bg-gray-200 transition"><span class="icon">📖</span>ဝေါဟာရ</button>
                        <button data-tab="phrases" class="tab-btn py-3 px-4 sm:px-6 font-semibold text-gray-600 rounded-t-lg border-b-2 border-transparent hover:bg-gray-200 transition"><span class="icon">💬</span>အသုံးအနှုန်းများ</button>
                        <button data-tab="grammar" class="tab-btn py-3 px-4 sm:px-6 font-semibold text-gray-600 rounded-t-lg border-b-2 border-transparent hover:bg-gray-200 transition"><span class="icon">📝</span>သဒ္ဒါ</button>
                    </nav>
                </div>

                <div id="tab-content">
                    <div id="vocabulary-content" class="tab-pane">
                        <p class="text-center text-muted mb-4">ဤဝေါဟာရများကို လေ့လာရန် ကတ်ကိုနှိပ်ပါ။</p>
                        <input type="text" id="vocab-search" placeholder="စကားလုံးရှာရန်..." class="w-full p-3 mb-6 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-400">
                        <div id="vocabulary-grid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4"></div>
                    </div>

                    <div id="phrases-content" class="tab-pane hidden">
                        <p class="text-center text-muted mb-4">ဤအသုံးအနှုန်းများကို လေ့လာရန် ကတ်ကိုနှိပ်ပါ။</p>
                        <input type="text" id="phrase-search" placeholder="အသုံးအနှုန်းရှာရန်..." class="w-full p-3 mb-6 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-400">
                        <div id="phrases-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4"></div>
                    </div>

                    <div id="grammar-content" class="tab-pane hidden">
                        <p class="text-center text-muted mb-4">Day အလိုက် သဒ္ဒါหัวข้อများ။</p>
                        <div id="grammar-list" class="bg-white p-6 rounded-lg shadow-sm"></div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script src="https://code.responsivevoice.org/responsivevoice.js?key=YOUR_API_KEY"></script>

    <!-- core data -->
    <script>
        const allVocabData = {
            'Day 1': [ { en: "Academic", my: "ပညာရပ်ဆိုင်ရာ" }, { en: "General Training", my: "အထွေထွေလေ့ကျင့်မှု" }, { en: "Essay", my: "စာစီစာကုံး" }, { en: "Opinion", my: "သဘောထား၊ အမြင်" }, { en: "Advantage", my: "အားသာချက်" }, { en: "Disadvantage", my: "အားနည်းချက်" }, { en: "Benefit", my: "အကျိုးကျေးဇူး" }, { en: "Global", my: "ကမ္ဘာလုံးဆိုင်ရာ" }, { en: "Environment", my: "ပတ်ဝန်းကျင်" }, { en: "Technology", my: "နည်းပညာ" }, { en: "Development", my: "ဖွံ့ဖြိုးတိုးတက်မှု" }, { en: "Communication", my: "ဆက်သွယ်ရေး" }, { en: "Education", my: "ပညာရေး" }, { en: "Society", my: "လူ့အဖွဲ့အစည်း" }, { en: "Solution", my: "ဖြေရှင်းချက်" }, { en: "Impact", my: "အကျိုးသက်ရောက်မှု" }, { en: "Evidence", my: "သက်သေအထောက်အထား" }, { en: "Process", my: "လုပ်ငန်းစဉ်" }, { en: "Issue", my: "ပြဿနာ" }, { en: "Research", my: "သုတေသန" } ],
            'Day 2': [ /* ... */ ],
            'Day 3': [ /* ... */ ],
            /* Day 4..50 already present in your file - kept as-is */
        };

        const allPhraseData = {
            'Day 1': [ { en: "In my opinion, ...", my: "ကျွန်တော့်အမြင်အရတော့..." }, { en: "To begin with, ...", my: "စတင်ရမယ်ဆိုရင်တော့..." }, { en: "On the one hand, ...", my: "တစ်ဖက်ကကြည့်မယ်ဆိုရင်..." } ],
            'Day 2': [ /* ... */ ],
            /* etc. */
        };

        const grammarData = [
            { en: "Simple Present Tense", my: "ပစ္စုပ္ပန်ကာလရိုးရိုး" },
            { en: "Present Perfect Tense", my: "ပစ္စုပ္ပန်ကာလပြီးစီး" },
            { en: "Modal Verbs (can, must, should)", my: "ကြိယာအထောက်အကူများ" },
            { en: "Passive Voice", my: "Passive အသံ" },
            { en: "Complex Sentences", my: "စာကြောင်းရှုပ်ထွေးများ" }
        ];
    </script>

    <!-- UI + customizer script -->
    <script>
        const vocabGrid = document.getElementById('vocabulary-grid');
        const phraseGrid = document.getElementById('phrases-grid');
        const grammarList = document.getElementById('grammar-list');
        const vocabSearch = document.getElementById('vocab-search');
        const phraseSearch = document.getElementById('phrase-search');
        const tabs = document.getElementById('tabs');
        const tabPanes = document.querySelectorAll('.tab-pane');
        const daySelect = document.getElementById('day-select');
        const themeToggle = document.getElementById('theme-toggle');
        const themeIcon = document.getElementById('theme-icon');
        const themeLabel = document.getElementById('theme-label');

        let currentDay = 'Day 1';
        let currentTab = 'vocabulary';

        for (let i = 1; i <= 100; i++) {
            const option = document.createElement('option');
            option.value = `Day ${i}`;
            option.innerText = `Day ${i}`;
            daySelect.appendChild(option);
        }

        function createCard(item){
            const card = document.createElement('div');
            card.className = 'flip-card h-32 cursor-pointer';
            card.innerHTML = `
                <div class="flip-card-inner">
                    <div class="flip-card-front font-semibold text-lg p-2">${item.en}</div>
                    <div class="flip-card-back font-semibold text-lg p-2">${item.my}</div>
                </div>
            `;
            card.addEventListener('click', () => {
                card.classList.toggle('is-flipped');
                if (card.classList.contains('is-flipped') && typeof responsiveVoice !== 'undefined') {
                    responsiveVoice.speak(item.en, "UK English Male");
                }
            });
            card.tabIndex = 0;
            return card;
        }

        function displayData(day, tab){
            if (tab === 'vocabulary'){
                vocabGrid.innerHTML = '';
                const data = allVocabData[day] || [];
                data.forEach(item => vocabGrid.appendChild(createCard(item)));
            } else if (tab === 'phrases'){
                phraseGrid.innerHTML = '';
                const data = allPhraseData[day] || [];
                data.forEach(item => phraseGrid.appendChild(createCard(item)));
            } else if (tab === 'grammar'){
                grammarList.innerHTML = '';
                const ul = document.createElement('ul');
                ul.className = 'space-y-4';
                grammarData.forEach(item => {
                    const li = document.createElement('li');
                    li.className = 'flex justify-between items-center';
                    li.innerHTML = `<span class="font-semibold" style="color:var(--text)">${item.en}</span><span class="text-blue-500 font-medium">${item.my}</span>`;
                    ul.appendChild(li);
                });
                grammarList.appendChild(ul);
            }
        }

        function filterCards(grid, searchTerm){
            const cards = grid.children;
            for (let card of cards){
                const frontText = (card.querySelector('.flip-card-front')||{}).textContent?.toLowerCase() || '';
                const backText = (card.querySelector('.flip-card-back')||{}).textContent?.toLowerCase() || '';
                if (frontText.includes(searchTerm) || backText.includes(searchTerm)) card.style.display = '';
                else card.style.display = 'none';
            }
        }

        vocabSearch?.addEventListener('keyup', ()=> filterCards(vocabGrid, vocabSearch.value.toLowerCase()));
        phraseSearch?.addEventListener('keyup', ()=> filterCards(phraseGrid, phraseSearch.value.toLowerCase()));

        tabs.addEventListener('click', (e)=>{
            const targetButton = e.target.closest('.tab-btn');
            if (!targetButton) return;
            currentTab = targetButton.dataset.tab;
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('tab-active'));
            targetButton.classList.add('tab-active');
            tabPanes.forEach(pane => {
                if (pane.id === `${currentTab}-content`) pane.classList.remove('hidden');
                else pane.classList.add('hidden');
            });
            displayData(currentDay, currentTab);
        });

        daySelect.addEventListener('change', (e)=>{
            currentDay = e.target.value;
            displayData(currentDay, currentTab);
        });

        document.addEventListener('DOMContentLoaded', ()=>{
            daySelect.value = currentDay;
            displayData(currentDay, currentTab);
            // show customizer button on wide screens
            document.getElementById('color-customizer').classList.remove('hidden');
        });

        // Theme toggle
        function applyTheme(theme){
            if (theme === 'dark'){
                document.documentElement.setAttribute('data-theme','dark');
                themeToggle.setAttribute('aria-pressed','true');
                themeIcon.textContent = '🌙';
                themeLabel.textContent = 'Dark';
            } else {
                document.documentElement.removeAttribute('data-theme');
                themeToggle.setAttribute('aria-pressed','false');
                themeIcon.textContent = '🌤️';
                themeLabel.textContent = 'Warm';
            }
        }
        (function initTheme(){
            const saved = localStorage.getItem('ielts_theme');
            if (saved) applyTheme(saved);
            else applyTheme(window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'warm');
        })();
        themeToggle.addEventListener('click', ()=>{
            const cur = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'warm';
            const next = cur === 'dark' ? 'warm' : 'dark';
            applyTheme(next);
            localStorage.setItem('ielts_theme', next);
        });

        // ---- Color customizer logic ----
        const defaultColors = {
            '--bg': getComputedStyle(document.documentElement).getPropertyValue('--bg').trim() || '#FDF8F0',
            '--text': getComputedStyle(document.documentElement).getPropertyValue('--text').trim() || '#2D3748',
            '--muted': getComputedStyle(document.documentElement).getPropertyValue('--muted').trim() || '#718096',
            '--accent': getComputedStyle(document.documentElement).getPropertyValue('--accent').trim() || '#ED8936',
            '--card-bg': getComputedStyle(document.documentElement).getPropertyValue('--card-bg').trim() || '#FFFFFF',
            '--card-back': getComputedStyle(document.documentElement).getPropertyValue('--card-back').trim() || '#60A5FA'
        };

        function applyColorVar(name, value){ document.documentElement.style.setProperty(name, value); }
        function loadSavedColors(){ try { return JSON.parse(localStorage.getItem('ielts_colors') || 'null'); } catch(e) { return null; } }
        function saveColors(obj){ localStorage.setItem('ielts_colors', JSON.stringify(obj)); }

        // wire customizer UI
        const openBtn = document.getElementById('customize-open');
        const panel = document.getElementById('customize-panel');
        openBtn?.addEventListener('click', ()=> panel.classList.toggle('hidden'));

        function populateCustomizer(){
            const inputs = panel.querySelectorAll('input[type="color"]');
            const saved = loadSavedColors();
            inputs.forEach(input => {
                const nm = input.dataset.var;
                const val = (saved && saved[nm]) || getComputedStyle(document.documentElement).getPropertyValue(nm).trim() || defaultColors[nm] || '#ffffff';
                try { input.value = val; } catch(e) { input.value = '#ffffff'; }
                input.oninput = (e)=> applyColorVar(nm, e.target.value);
            });
        }

        document.getElementById('customize-reset')?.addEventListener('click', ()=>{
            Object.keys(defaultColors).forEach(k => applyColorVar(k, defaultColors[k]));
            saveColors(defaultColors);
            populateCustomizer();
        });

        document.getElementById('customize-save')?.addEventListener('click', ()=>{
            const inputs = panel.querySelectorAll('input[type="color"]');
            const obj = {};
            inputs.forEach(i => obj[i.dataset.var] = i.value);
            saveColors(obj);
        });

        (function initColors(){
            const saved = loadSavedColors();
            if (saved) Object.keys(saved).forEach(k => applyColorVar(k, saved[k]));
            else Object.keys(defaultColors).forEach(k => applyColorVar(k, defaultColors[k]));
        })();

        // populate customizer after